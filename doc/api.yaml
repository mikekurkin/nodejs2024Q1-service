openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        "200":
          description: ""
  /user:
    post:
      operationId: UserController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEntity"
        "400":
          description: "Bad request: body does not contain required fields"
      tags: &a1
        - User
    get:
      operationId: UserController_findAll
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserEntity"
      tags: *a1
  /user/{id}:
    get:
      operationId: UserController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEntity"
        "400":
          description: "Bad request: userId is invalid (not uuid)"
        "404":
          description: User not found
      tags: *a1
    put:
      operationId: UserController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEntity"
        "400":
          description: "Bad request: userId is invalid (not uuid)"
        "403":
          description: Password does not match
        "404":
          description: User not found
      tags: *a1
    delete:
      operationId: UserController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        "204":
          description: The user has been deleted
        "400":
          description: "Bad request: userId is invalid (not uuid)"
        "404":
          description: User not found
      tags: *a1
  /artist:
    post:
      operationId: ArtistController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateArtistDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArtistEntity"
        "400":
          description: "Bad request: body does not contain required fields"
      tags: &a2
        - Artist
    get:
      operationId: ArtistController_findAll
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ArtistEntity"
      tags: *a2
  /artist/{id}:
    get:
      operationId: ArtistController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArtistEntity"
        "400":
          description: "Bad request: artistId is invalid (not uuid)"
        "404":
          description: Artist not found
      tags: *a2
    put:
      operationId: ArtistController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateArtistDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArtistEntity"
        "400":
          description: "Bad request: artistId is invalid (not uuid)"
        "404":
          description: Artist not found
      tags: *a2
    delete:
      operationId: ArtistController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        "204":
          description: The artist has been deleted
        "400":
          description: "Bad request: artistId is invalid (not uuid)"
        "404":
          description: Artist not found
      tags: *a2
  /track:
    post:
      operationId: TrackController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTrackDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrackEntity"
        "400":
          description: "Bad request: body does not contain required fields"
      tags: &a3
        - Track
    get:
      operationId: TrackController_findAll
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TrackEntity"
      tags: *a3
  /track/{id}:
    get:
      operationId: TrackController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrackEntity"
        "400":
          description: "Bad request: trackId is invalid (not uuid)"
        "404":
          description: Track not found
      tags: *a3
    put:
      operationId: TrackController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTrackDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrackEntity"
        "400":
          description: "Bad request: trackId is invalid (not uuid)"
        "404":
          description: Track not found
      tags: *a3
    delete:
      operationId: TrackController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        "204":
          description: The track has been deleted
        "400":
          description: "Bad request: trackId is invalid (not uuid)"
        "404":
          description: Track not found
      tags: *a3
  /album:
    post:
      operationId: AlbumController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAlbumDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlbumEntity"
        "400":
          description: "Bad request: body does not contain required fields"
      tags: &a4
        - Album
    get:
      operationId: AlbumController_findAll
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AlbumEntity"
      tags: *a4
  /album/{id}:
    get:
      operationId: AlbumController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlbumEntity"
        "400":
          description: "Bad request: albumId is invalid (not uuid)"
        "404":
          description: Album not found
      tags: *a4
    put:
      operationId: AlbumController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAlbumDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlbumEntity"
        "400":
          description: "Bad request: albumId is invalid (not uuid)"
        "404":
          description: Album not found
      tags: *a4
    delete:
      operationId: AlbumController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        "204":
          description: The album has been deleted
        "400":
          description: "Bad request: albumId is invalid (not uuid)"
        "404":
          description: Album not found
      tags: *a4
  /favs:
    get:
      operationId: FavsController_findAll
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FavoritesResponse"
      tags: &a5
        - Favorites
  /favs/track/{id}:
    post:
      operationId: FavsController_addTrack
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        "201":
          description: Track added to favorites successfully
        "400":
          description: "Bad request: trackId is invalid (not uuid)"
        "422":
          description: "Unprocessable entry: Track does not exist"
      tags: *a5
    delete:
      operationId: FavsController_removeTrack
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        "204":
          description: The track has been deleted
        "400":
          description: "Bad request: trackId is invalid (not uuid)"
        "404":
          description: Track not found
      tags: *a5
  /favs/album/{id}:
    post:
      operationId: FavsController_addAlbum
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        "201":
          description: Album added to favorites successfully
        "400":
          description: "Bad request: albumId is invalid (not uuid)"
        "422":
          description: "Unprocessable entry: Album does not exist"
      tags: *a5
    delete:
      operationId: FavsController_removeAlbum
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        "204":
          description: The album has been deleted
        "400":
          description: "Bad request: albumId is invalid (not uuid)"
        "404":
          description: Album not found
      tags: *a5
  /favs/artist/{id}:
    post:
      operationId: FavsController_addArtist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        "201":
          description: Artist added to favorites successfully
        "400":
          description: "Bad request: artistId is invalid (not uuid)"
        "422":
          description: "Unprocessable entry: Artist does not exist"
      tags: *a5
    delete:
      operationId: FavsController_removeArtist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        "204":
          description: The artist has been deleted
        "400":
          description: "Bad request: artistId is invalid (not uuid)"
        "404":
          description: Artist not found
      tags: *a5
info:
  title: Home Library Service
  description: Home music library service
  version: 1.0.0
  contact: {}
tags: []
servers: []
components:
  schemas:
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
      required:
        - login
        - password
    UserEntity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        login:
          type: string
        version:
          type: number
          default: 1
        createdAt:
          type: number
          default: 1710111815620
        updatedAt:
          type: number
          default: 1710111815620
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
      required:
        - oldPassword
        - newPassword
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
        grammy:
          type: boolean
      required:
        - name
        - grammy
    ArtistEntity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        grammy:
          type: boolean
      required:
        - id
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
        grammy:
          type: boolean
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
        duration:
          type: number
          default: 180
        artistId:
          type: string
          format: uuid
        albumId:
          type: string
          format: uuid
      required:
        - name
        - duration
    TrackEntity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        artistId:
          type: string
          format: uuid
        albumId:
          type: string
          format: uuid
        duration:
          type: number
          default: 180
      required:
        - id
        - name
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
        duration:
          type: number
          default: 180
        artistId:
          type: string
          format: uuid
        albumId:
          type: string
          format: uuid
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
        year:
          type: number
          default: 2000
        artistId:
          type: string
          format: uuid
      required:
        - name
        - year
    AlbumEntity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        year:
          type: number
          default: 2000
        artistId:
          type: string
          format: uuid
      required:
        - id
        - name
        - year
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
        year:
          type: number
          default: 2000
        artistId:
          type: string
          format: uuid
    FavoritesResponse:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: "#/components/schemas/ArtistEntity"
        albums:
          type: array
          items:
            $ref: "#/components/schemas/AlbumEntity"
        tracks:
          type: array
          items:
            $ref: "#/components/schemas/TrackEntity"
      required:
        - artists
        - albums
        - tracks
